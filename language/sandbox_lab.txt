# A file represents a class, or maybe struct in the future. That is up in the air, but for simplicity it will represent classes for now.
# Defines the name of the class, consistent with “return type” syntax `: `. Inferred from filename if omitted
: SandboxLab

# Implied name would be Sandbox_Lab so it doesn't cause conflicts

# For this file it would be Language_Fun. I can see this being useful during development. For example, you can put a bunch of debug stuff in a file without having to explicitly create a class to access it. what if I want this to be a struct?

name: str = 'Bojan'

question: str = 'What"s the name of this language?'

# `num` abstracts numbers so you don't have to specify int or float

some_number: num = 1.0

# call `number.evaluated_type` to receive int

# an_integer: int = 1

should_test?: bool = test_method?

# infer type when omitted
some = some_method()


some_method() # imply return type void when omitted
end

add(a: num, b: num): num
  a + b
end

some_method
end

test_method?(): bool
  true
end

# implied return keyword akin to Ruby

# custom inheritance where you can opt to inherit the entire object, only public declarations, or only private declarations. Additionally, you can opt for only variables, or only methods. Any combination of those, really


