1. Keyword - Reserved words that have special meaning in the language. Examples: `if`, `else`, `while`, `for`, `return`, `true`, `false`.
2. Identifier - User-defined names representing variables, functions, or classes. Examples: `counter`, `calculate_sum`, `Person`.
3. StringLiteral - A sequence of characters enclosed in quotes. Examples: `"Hello, World!"`, `'Ruby is fun!'`.
4. NumericLiteral - A numerical value. Examples: `42`, `3.14`, `10_000`.
5. BooleanLiteral - Represents a true or false value. Examples: `true`, `false`.
6. AssignmentOperator - Assigns a value to a variable. Examples: `=`, `+=`, `-=`.
7. ArithmeticOperator - Performs mathematical operations. Examples: `+`, `-`, `*`, `/`.
8. ComparisonOperator - Compares values. Examples: `==`, `!=`, `>`, `<`.
9. LogicalOperator - Performs logical operations. Examples: `&&`, `||`, `!`.
10. OpenParenthesis - Opening parenthesis. Example: `(`.
11. CloseParenthesis - Closing parenthesis. Example: `)`.
12. OpenCurlyBrace - Opening curly brace. Example: `{`.
13. CloseCurlyBrace - Closing curly brace. Example: `}`.
14. OpenSquareBracket - Opening square bracket. Example: `[`.
15. CloseSquareBracket - Closing square bracket. Example: `]`.
16. Comma - Used to separate items in a list. Example: `,`.
17. Semicolon - Used to terminate statements. Example: `;`.
18. Dot - Used to access properties or methods of an object. Example: `.`.
19. Comment - Non-executable text providing explanations or notes. Example: `# This is a comment`.
20. Whitespace - Spaces, tabs, or newlines used for formatting and readability.



1. Identifiers:
   - Examples: variable, method_name, Class, CONSTANT, snake_case

2. Keywords:
   - Examples: if, else, while, for, class, def, module, begin, end

3. Literals:
   - Numeric Literals:
     - Examples: 42, 3.14, 0b1010, 0o777, 0xFF, 1_000_000
   - String Literals:
     - Examples: 'Hello, World!', "Ruby is awesome"
   - Symbol Literals:
     - Examples: :symbol, :ruby, :example
   - Boolean Literals:
     - Examples: true, false
   - Array Literals:
     - Examples: [1, 2, 3], ['a', 'b', 'c']
   - Hash Literals:
     - Examples: { key1: 'value1', key2: 'value2' } and { :key => 'value' }

4. Operators:
   - Arithmetic Operators:
     - Examples: +, -, *, /, %,
   - Assignment Operators:
     - Examples: =, +=, -=, *=, /=, %=
   - Comparison Operators:
     - Examples: ==, !=, <, >, <=, >=
   - Logical Operators:
     - Examples: &&, ||, !
   - Bitwise Operators:
     - Examples: &, |, ~, ^, <<, >>

5. Delimiters:
   - Examples: (, ), {, }, [, ], ,, ;

6. Comments:
   - Single-line Comment:
     - Example: # This is a comment
   - Multi-line Comment:
     - Example:
       ruby
       =begin
       This is a
       multi-line comment
       =end

7. Control Characters:
   - Examples: \n, \t, \r, \\, \", \'

8. Whitespace:
   - Examples: Space ( ), Tab (\t), Newline (\n), Carriage Return (\r)

9. End-of-Line:
   - Example: ;

Please note that this is not an exhaustive list, and there may be additional token types depending on the context and language features used in the code. This list covers some of the most common token types encountered in Ruby programming.
